#############################################################################
# Makefile for building: samurai
# Generated by qmake (2.01a) (Qt 4.6.2) on: Wed Jun 22 14:03:53 2011
# Project:  samurai.pro
# Template: app
# Command: /usr/bin/qmake-qt4 -spec /usr/lib64/qt4/mkspecs/linux-icc-64 -unix -o Makefile samurai.pro
#############################################################################

####### Compiler, tools and options

CC            = icc
CXX           = icpc
DEFINES       = -DQT_NO_DEBUG -DQT_XML_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -wd654,1572 -O2 -D_REENTRANT $(DEFINES)
CXXFLAGS      = -wd654,1572 -O2 -D_REENTRANT $(DEFINES)
BASE_DIR      = /work/mmbell
INCPATH       = -I/usr/lib64/qt4/mkspecs/linux-icc-64 -I. -I$(BASE_DIR)/include/QtCore -I$(BASE_DIR)include/QtGui -I$(BASE_DIR)/include/QtXml -I/usr/include -I$(BASE_DIR)/include
LINK          = icpc
LFLAGS        = 
LIBS          = $(SUBLIBS) -g -openmp -L$(BASE_DIR)/samurai/lib -L/usr/lib64 -lcurl -lGeographic -lhdf5 -lnetcdf -lnetcdf_c++ -lQtXml -lQtGui -lQtCore  
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -R
STRIP         = 
INSTALL_FILE  = $(COPY_FILE)
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = $(COPY_FILE)
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = BSplineD.cpp \
		BSplineF.cpp \
		CostFunction.cpp \
		CostFunctionXYZ.cpp \
		main.cpp \
		MetObs.cpp \
		Observation.cpp \
		RecursiveFilter.cpp \
		VarDriver.cpp \
		VarDriverXYZ.cpp \
		Dorade.cpp \
		FrameCenter.cpp 
OBJECTS       = BSplineD.o \
		BSplineF.o \
		CostFunction.o \
		CostFunctionXYZ.o \
		main.o \
		MetObs.o \
		Observation.o \
		RecursiveFilter.o \
		VarDriver.o \
		VarDriverXYZ.o \
		Dorade.o \
		FrameCenter.o
DIST          = /usr/lib64/qt4/mkspecs/common/unix.conf \
		/usr/lib64/qt4/mkspecs/qconfig.pri \
		/usr/lib64/qt4/mkspecs/features/qt_functions.prf \
		/usr/lib64/qt4/mkspecs/features/qt_config.prf \
		/usr/lib64/qt4/mkspecs/linux-icc/qmake.conf \
		/usr/lib64/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/lib64/qt4/mkspecs/features/default_pre.prf \
		/usr/lib64/qt4/mkspecs/features/debug.prf \
		/usr/lib64/qt4/mkspecs/features/default_post.prf \
		/usr/lib64/qt4/mkspecs/features/warn_on.prf \
		/usr/lib64/qt4/mkspecs/features/qt.prf \
		/usr/lib64/qt4/mkspecs/features/unix/thread.prf \
		/usr/lib64/qt4/mkspecs/features/moc.prf \
		/usr/lib64/qt4/mkspecs/features/resources.prf \
		/usr/lib64/qt4/mkspecs/features/uic.prf \
		/usr/lib64/qt4/mkspecs/features/yacc.prf \
		/usr/lib64/qt4/mkspecs/features/lex.prf \
		/usr/lib64/qt4/mkspecs/features/include_source_dir.prf \
		samurai.pro
QMAKE_TARGET  = samurai
DESTDIR       = 
TARGET        = samurai

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: samurai.pro  /usr/lib64/qt4/mkspecs/linux-icc-64/qmake.conf /usr/lib64/qt4/mkspecs/common/unix.conf \
		/usr/lib64/qt4/mkspecs/qconfig.pri \
		/usr/lib64/qt4/mkspecs/features/qt_functions.prf \
		/usr/lib64/qt4/mkspecs/features/qt_config.prf \
		/usr/lib64/qt4/mkspecs/linux-icc/qmake.conf \
		/usr/lib64/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/lib64/qt4/mkspecs/features/default_pre.prf \
		/usr/lib64/qt4/mkspecs/features/debug.prf \
		/usr/lib64/qt4/mkspecs/features/default_post.prf \
		/usr/lib64/qt4/mkspecs/features/warn_on.prf \
		/usr/lib64/qt4/mkspecs/features/qt.prf \
		/usr/lib64/qt4/mkspecs/features/unix/thread.prf \
		/usr/lib64/qt4/mkspecs/features/moc.prf \
		/usr/lib64/qt4/mkspecs/features/resources.prf \
		/usr/lib64/qt4/mkspecs/features/uic.prf \
		/usr/lib64/qt4/mkspecs/features/yacc.prf \
		/usr/lib64/qt4/mkspecs/features/lex.prf \
		/usr/lib64/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib64/libQtXml.prl \
		/usr/lib64/libQtGui.prl \
		/usr/lib64/libQtCore.prl
	$(QMAKE) -spec /usr/lib64/qt4/mkspecs/linux-icc-64 -unix -o Makefile samurai.pro
/usr/lib64/qt4/mkspecs/common/unix.conf:
/usr/lib64/qt4/mkspecs/qconfig.pri:
/usr/lib64/qt4/mkspecs/features/qt_functions.prf:
/usr/lib64/qt4/mkspecs/features/qt_config.prf:
/usr/lib64/qt4/mkspecs/linux-icc/qmake.conf:
/usr/lib64/qt4/mkspecs/features/exclusive_builds.prf:
/usr/lib64/qt4/mkspecs/features/default_pre.prf:
/usr/lib64/qt4/mkspecs/features/debug.prf:
/usr/lib64/qt4/mkspecs/features/default_post.prf:
/usr/lib64/qt4/mkspecs/features/warn_on.prf:
/usr/lib64/qt4/mkspecs/features/qt.prf:
/usr/lib64/qt4/mkspecs/features/unix/thread.prf:
/usr/lib64/qt4/mkspecs/features/moc.prf:
/usr/lib64/qt4/mkspecs/features/resources.prf:
/usr/lib64/qt4/mkspecs/features/uic.prf:
/usr/lib64/qt4/mkspecs/features/yacc.prf:
/usr/lib64/qt4/mkspecs/features/lex.prf:
/usr/lib64/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib64/libQtXml.prl:
/usr/lib64/libQtGui.prl:
/usr/lib64/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/lib64/qt4/mkspecs/linux-icc-64 -unix -o Makefile samurai.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/samurai1.0.0 || $(MKDIR) .tmp/samurai1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/samurai1.0.0/ && $(COPY_FILE) --parents BandedMatrix.h BSpline.h CostFunction.h CostFunctionRZ_CPU.h CostFunctionXY_CPU.h CostFunctionXYZ.h CostFunctionVAR.h MetObs.h Observation.h RecursiveFilter.h VarDriver.h VarDriverRZ.h VarDriverXY.h VarDriverXYZ.h VarDriverVAR.h Dorade.h read_dorade.h precision.h FrameCenter.h .tmp/samurai1.0.0/ && $(COPY_FILE) --parents BSplineD.cpp BSplineF.cpp CostFunction.cpp CostFunctionRZ_CPU.cpp CostFunctionXY_CPU.cpp CostFunctionXYZ.cpp CostFunctionVAR.cpp main.cpp MetObs.cpp Observation.cpp RecursiveFilter.cpp VarDriver.cpp VarDriverRZ.cpp VarDriverXY.cpp VarDriverXYZ.cpp VarDriverVAR.cpp Dorade.cpp FrameCenter.cpp .tmp/samurai1.0.0/ && (cd `dirname .tmp/samurai1.0.0` && $(TAR) samurai1.0.0.tar samurai1.0.0 && $(COMPRESS) samurai1.0.0.tar) && $(MOVE) `dirname .tmp/samurai1.0.0`/samurai1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/samurai1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) -r $(OBJECTS_DIR)/ti_files
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

BSplineD.o: BSplineD.cpp BSpline.cpp \
		BSpline.h \
		precision.h \
		BandedMatrix.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BSplineD.o BSplineD.cpp

BSplineF.o: BSplineF.cpp BSpline.cpp \
		BSpline.h \
		precision.h \
		BandedMatrix.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o BSplineF.o BSplineF.cpp

CostFunction.o: CostFunction.cpp CostFunction.h \
		precision.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CostFunction.o CostFunction.cpp

CostFunctionRZ_CPU.o: CostFunctionRZ_CPU.cpp CostFunctionRZ_CPU.h \
		CostFunction.h \
		precision.h \
		BSpline.h \
		RecursiveFilter.h \
		Observation.h \
		MetObs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CostFunctionRZ_CPU.o CostFunctionRZ_CPU.cpp

CostFunctionXY_CPU.o: CostFunctionXY_CPU.cpp CostFunctionXY_CPU.h \
		CostFunction.h \
		precision.h \
		BSpline.h \
		RecursiveFilter.h \
		Observation.h \
		MetObs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CostFunctionXY_CPU.o CostFunctionXY_CPU.cpp

CostFunctionXYZ.o: CostFunctionXYZ.cpp CostFunctionXYZ.h \
		CostFunction.h \
		precision.h \
		BSpline.h \
		RecursiveFilter.h \
		Observation.h \
		MetObs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -openmp -o CostFunctionXYZ.o CostFunctionXYZ.cpp

CostFunctionVAR.o: CostFunctionVAR.cpp CostFunctionVAR.h \
		CostFunction.h \
		precision.h \
		BSpline.h \
		RecursiveFilter.h \
		Observation.h \
		MetObs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o CostFunctionVAR.o CostFunctionVAR.cpp

main.o: main.cpp precision.h \
		VarDriverXYZ.h \
		VarDriver.h \
		BSpline.h \
		Observation.h \
		MetObs.h \
		FrameCenter.h \
		CostFunctionXYZ.h \
		CostFunction.h \
		RecursiveFilter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cpp

MetObs.o: MetObs.cpp MetObs.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o MetObs.o MetObs.cpp

Observation.o: Observation.cpp Observation.h \
		precision.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Observation.o Observation.cpp

RecursiveFilter.o: RecursiveFilter.cpp RecursiveFilter.h \
		precision.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o RecursiveFilter.o RecursiveFilter.cpp

VarDriver.o: VarDriver.cpp VarDriver.h \
		BSpline.h \
		precision.h \
		Observation.h \
		MetObs.h \
		FrameCenter.h \
		Dorade.h \
		read_dorade.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o VarDriver.o VarDriver.cpp

VarDriverRZ.o: VarDriverRZ.cpp VarDriverRZ.h \
		VarDriver.h \
		BSpline.h \
		precision.h \
		Observation.h \
		MetObs.h \
		FrameCenter.h \
		CostFunctionRZ_CPU.h \
		CostFunction.h \
		RecursiveFilter.h \
		Dorade.h \
		read_dorade.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o VarDriverRZ.o VarDriverRZ.cpp

VarDriverXY.o: VarDriverXY.cpp VarDriverXY.h \
		VarDriver.h \
		BSpline.h \
		precision.h \
		Observation.h \
		MetObs.h \
		FrameCenter.h \
		CostFunctionXY_CPU.h \
		CostFunction.h \
		RecursiveFilter.h \
		Dorade.h \
		read_dorade.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o VarDriverXY.o VarDriverXY.cpp

VarDriverXYZ.o: VarDriverXYZ.cpp VarDriverXYZ.h \
		VarDriver.h \
		BSpline.h \
		precision.h \
		Observation.h \
		MetObs.h \
		FrameCenter.h \
		CostFunctionXYZ.h \
		CostFunction.h \
		RecursiveFilter.h \
		Dorade.h \
		read_dorade.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o VarDriverXYZ.o VarDriverXYZ.cpp

VarDriverVAR.o: VarDriverVAR.cpp VarDriverVAR.h \
		VarDriver.h \
		BSpline.h \
		precision.h \
		Observation.h \
		MetObs.h \
		FrameCenter.h \
		CostFunctionVAR.h \
		CostFunction.h \
		RecursiveFilter.h \
		Dorade.h \
		read_dorade.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o VarDriverVAR.o VarDriverVAR.cpp

Dorade.o: Dorade.cpp Dorade.h \
		read_dorade.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o Dorade.o Dorade.cpp

FrameCenter.o: FrameCenter.cpp FrameCenter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o FrameCenter.o FrameCenter.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

